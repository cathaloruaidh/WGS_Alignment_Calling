#!/bin/bash

############################################################
#
# Assembly of NGS data from FASTQ to GVCF 
# Cathal Ormond 2017. 
#
# Initial set up and creation of parameters. 
#
# Based heavily on scripts found here:
# https://github.com/genepi-freiburg/gwas
#
############################################################






### Text variables
PASS_TEST_LIGHT="[\e[102mPASSED\e[0m]"
PASS_TEST="[\e[42mPASSED\e[0m]"
FAIL_TEST_LIGHT="[\e[101mFAILED\e[0m]"
FAIL_TEST="[\e[41mFAILED\e[0m]"




### Create the main log file
if [[ -f ${MAIN_LOG_FILE} ]]
then
	mv ${MAIN_LOG_FILE} ${MAIN_LOG_FILE}.$(date +%Y-%m-%d_%H.%M.%S)
	touch ${MAIN_LOG_FILE}
	log "Renaming previous log file" 3
else
	log "Creating the main log file: ${MAIN_LOG_FILE}" 3
	touch ${MAIN_LOG_FILE}
fi




### Source name
# The base name of the raw data files.
SOURCE_FILE=$1


if [[ ${S} == 1 ]]
then 
	if [[ -f ${SOURCE_FILE}_R1.fastq ]]
	then
		READ1=${SOURCE_FILE}_R1.fastq
		READ2=${SOURCE_FILE}_R2.fastq
	
	elif [[ -f ${SOURCE_FILE}_R1.fq ]]
	then
		READ1=${SOURCE_FILE}_R1.fq
		READ2=${SOURCE_FILE}_R2.fq
	
	elif [[ -f ${SOURCE_FILE}_R1.fastq.gz ]]
	then
		READ1=${SOURCE_FILE}_R1.fastq.gz
		READ2=${SOURCE_FILE}_R2.fastq.gz
	
	elif [[ -f ${SOURCE_FILE}_R1.fq.gz ]]
	then
		READ1=${SOURCE_FILE}_R1.fq.gz
		READ2=${SOURCE_FILE}_R2.fq.gz
	
	elif [[ -f ${SOURCE_FILE}.R1.fastq ]]
	then
		READ1=${SOURCE_FILE}.R1.fastq
		READ2=${SOURCE_FILE}.R2.fastq
	
	elif [[ -f ${SOURCE_FILE}.R1.fq ]]
	then
		READ1=${SOURCE_FILE}.R1.fq
		READ2=${SOURCE_FILE}.R2.fq
	
	elif [[ -f ${SOURCE_FILE}.R1.fastq.gz ]]
	then
		READ1=${SOURCE_FILE}.R1.fastq.gz
		READ2=${SOURCE_FILE}.R2.fastq.gz
	
	elif [[ -f ${SOURCE_FILE}.R1.fq.gz ]]
	then
		READ1=${SOURCE_FILE}.R1.fq.gz
		READ2=${SOURCE_FILE}.R2.fq.gz
	else
		log "Cannot find read files of the format '${SOURCE_FILE}_R1.fastq' etc." 1
		exit 1
	fi


else
	if [[ $(find ${RESULTS_DIR} -name "${OUTPUT_PREFIX}*bam" | wc -l ) == 0 ]]
	then
		log "Cannot find BAM files in the results directory. " 1
		exit 1
	fi
fi


log "Found source files with prefix: ${SOURCE_FILE}" 3
log " " 3





### Processors and Memory
TPROCS=$(grep -c ^processor /proc/cpuinfo)
#TPROCS=14

#if [[ ${TPROCS} -gt 4 ]]
#then
#	NPROCS=$(( ${TPROCS} - 4 ))
#else
#	NPROCS=1
#fi

if [[ -z "${NPROCS}" ]]
then
	NPROCS=4
fi

APROCS=$(( ${NPROCS} - 1 ))


log "Using ${NPROCS} processors out of a total ${TPROCS}" 3
log " " 3


# Max Memory used by one process
# set to > 1/5 of Vishnu's max
JAVA_TEMP="-Djava.io.tmpdir=${TEMP_DIR}"
JAVA_OPTIONS=" -Xms${JAVA_MIN} -Xmx${JAVA_MAX} ${JAVA_TEMP}"




### Global Directories and Files
# Test if the source directory exists
if [[ ! -d ${SOURCE_DIR} ]]
then
	log "Problem with source directory: ${SOURCE_DIR}" 1
	exit 8
fi

log  "Currently directory: ${SOURCE_DIR}" 4

log " " 4




### Create required files and directories
# Log directory for all log files generated by Plink
if [[ ! -d ${LOG_DIR} ]]
then
	mkdir -p ${LOG_DIR}
	log "Creating log directory: ${LOG_DIR##*/}" 3

else
	log "Log directory already exists at: ${LOG_DIR##*/}" 4
fi



# Results directory for all results files
if [[ ! -d ${RESULTS_DIR} ]]
then
	log "Creating results directory: ${RESULTS_DIR##*/}" 3
	mkdir -p ${RESULTS_DIR}

else
	log "Results directory already exists at: ${RESULTS_DIR##*/}" 4 
fi



# Temporary directory for any intermediate steps
if [[ ! -d ${TEMP_DIR} ]]
then
	log "Creating temp directory: ${TEMP_DIR##*/}" 3
	mkdir -p ${TEMP_DIR}

else
	log "Temp directory already exists at: ${TEMP_DIR##*/} - deleting contents" 4
	rm -f ${TEMP_DIR}/* 2> /dev/null
fi



# Graphics directory for all images for further analysis
if [[ ! -d ${GRAPHICS_DIR} ]]
then
	log "Creating graphics directory: ${GRAPHICS_DIR##*/}" 3
	mkdir -p ${GRAPHICS_DIR}

else
	log "Graphics directory already exists at: ${GRAPHICS_DIR##*/}" 4
fi


log " " 4
log " " 3




### Set the program paths
PICARD_FILE=${TOOL_DIR}/picard.jar

GATK34_FILE=${TOOL_DIR}/gatk/GenomeAnalysisTK_3.4.jar
GATK37_FILE=${TOOL_DIR}/gatk/GenomeAnalysisTK_3.7.jar
GATK38_FILE=${TOOL_DIR}/gatk/GenomeAnalysisTK_3.8.jar



# if the variables are empty, throw an error
if [[ -z "$(command -v plink)" ]]
then
	log "Error: plink not found." 1
	exit 6
fi
log "Plink was successfully found." 4



if [[ -z "$(command -v Rscript)" ]]
then
	log "Error: Rscript not found" 1
	exit 7
fi
log "R was sucessfully found." 4



if [[ -z "$(command -v bwa)" ]]
then
	log "Error: bwa not found." 1
	exit 6
fi
log "bwa was successfully found." 4



if [[ -z "$(command -v samtools)" ]]
then
	log "Error: samtools not found." 1
	exit 6
fi
log "samtools was successfully found." 4



if [[ ! -f ${PICARD_FILE} ]]
then
	log "Error: picard not found." 1
	exit 6
fi
log "Picard was successfully found." 4



if [[ ! -f ${GATK34_FILE} ]] && [[ ! -f ${GATK37_FILE} ]] && [[ ! -f ${GATK38_FILE} ]]
then
	log "Error: GATK 3.4, 3.7 and 3.8 not found." 1
	exit 6
fi
log "GATK was successfully found." 4



# Edinburgh pipeline uses GATK 3.4, so start with that
# and use newer versions until one is found. 

if [[ ! -f ${GATK_FILE} ]]
then
	GATK_FILE=${GATK34_FILE}
fi


if [[ ! -f ${GATK_FILE} ]]
then
	GATK_FILE=${GATK37_FILE}
fi


if [[ ! -f ${GATK_FILE} ]]
then
	GATK_FILE=${GATK38_FILE}
fi




### Find the Resource Files, depending on the reference build.
if [[ $( echo ${BUILD} | grep -E "19" ) ]]
then
	REFERENCE=hg19
	REF_FILE=${REF_DIR}/${REFERENCE}/ucsc.hg19.fasta
	INDELS_FILE=${REF_DIR}/${REFERENCE}/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.gz
	DBSNP_NEW=${REF_DIR}/${REFERENCE}/dbsnp_150.hg19.vcf.gz
	DBSNP_OLD=${REF_DIR}/${REFERENCE}/dbsnp_138.hg19.vcf.gz

else
	REFERENCE=GRCh38
	REF_FILE=${REF_DIR}/${REFERENCE}/GRCh38_full_analysis_set_plus_decoy_hla.fa
	INDELS_FILE=${REF_DIR}/${REFERENCE}/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz
	DBSNP_NEW=${REF_DIR}/${REFERENCE}/dbsnp_150.hg38.vcf.gz
	DBSNP_OLD=${REF_DIR}/${REFERENCE}/dbsnp_146.hg38.vcf.gz
fi



if [[ ! -f ${REF_FASTA} ]]
then
	if [[ -z ${REF_FASTA} ]]
	then
		log "No referece file specified, using ${REF_FILE##*/}" 4
	else
		log "Specified reference file (${REF_FASTA}) does not exist, using ${REF_FILE##*/}" 2
	fi

	REF_FASTA=${REF_FILE}
else
	log "Reference file: $(basename ${REF_FASTA})" 4
fi


if [[ ! -f ${DBSNP} ]]
then
	if [[ -z ${DBSNP} ]]
	then
		log "No dbSNP file specified, using ${DBSNP_NEW##*/}" 4
	else
		log "Specified dbSNP file (${DBSNP}) does not exist, using $(basename ${DBSNP_NEW##*/})" 2
	fi
	DBSNP=${DBSNP_NEW}
else
	log "dbSNP file: $(basename ${DBSNP})" 4
fi


if [[ ! -f ${INDELS} ]]
then
	if [[ -z ${INDELS} ]]
	then
		log "No indel file specified, using ${INDELS_FILE##*/}" 4
	else
		log "Specified dbSNP file (${INDELS}) does not exist, using $(basename ${INDELS_FILE##*/})" 2
	fi
	INDELS=${INDELS_FILE}
fi

log " "  4







### Name the output files

BAM=${OUTPUT_PREFIX}.bam
RG_BAM=${OUTPUT_PREFIX}.rg.bam
REORDER_BAM=${OUTPUT_PREFIX}.rg.reorder.bam

SORT_BAM=${OUTPUT_PREFIX}.rg.reorder.sort.bam
SORT_BAI=${OUTPUT_PREFIX}.rg.reorder.sort.bai
FIRST_VAL=${OUTPUT_PREFIX}.rg.reorder.sort.validation.txt

DUP_MET=${OUTPUT_PREFIX}.rg.reorder.sort.metrics
NODUP_BAM=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.bam
NODUP_BAI=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.bai

REALIGN_INTERVALS=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.intervals
REALIGN_BAM=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bam

BQSR_TABLE_BEFORE=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.before.table
BQSR_TABLE_AFTER=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.after.table
BQSR_PLOTS=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.plots.pdf
BQSR_CSV=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.csv
BQSR_BAM=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.bam

FINAL_VAL=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.validation.txt
BQSR_STATS=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.stats
BQSR_WGS=${OUTPUT_PREFIX}.rg.reorder.sort.nodup.realign.bqsr.wgs.txt

GVCF=${OUTPUT_PREFIX}.g.vcf
GVCF_GZ=${OUTPUT_PREFIX}.g.vcf.gz
GVCF_TBI=${OUTPUT_PREFIX}.g.vcf.gz.tbi

REPORT_TEX=${OUTPUT_PREFIX}.report.tex
